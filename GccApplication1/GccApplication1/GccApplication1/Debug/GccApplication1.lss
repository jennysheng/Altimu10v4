
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000006a6  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080012a  0080012a  00000764  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d8  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000315  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000402  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000321  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000805  00000000  00000000  00002901  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003106  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
  9e:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <writeData>:
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while (!(TWCR & (1 <<TWINT)));
}
void writeData(uint8_t data)
{
	TWDR= data;
  a6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
  aa:	84 e8       	ldi	r24, 0x84	; 132
  ac:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 <<TWINT)));
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 23       	and	r24, r24
  b8:	ec f7       	brge	.-6      	; 0xb4 <writeData+0xe>
}
  ba:	08 95       	ret

000000bc <readACK>:

uint8_t readACK()
{
	
	 //TWI Interrupt Flag, TWI Enable Bit, TWI Enable Acknowledge Bit
	 TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  bc:	84 ec       	ldi	r24, 0xC4	; 196
  be:	80 93 bc 00 	sts	0x00BC, r24
	 //Wait for TWINT Flag set.
	 while (!(TWCR & (1<<TWINT)));
  c2:	ec eb       	ldi	r30, 0xBC	; 188
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <readACK+0xa>
	 return TWDR;
  cc:	80 91 bb 00 	lds	r24, 0x00BB
}
  d0:	08 95       	ret

000000d2 <readData>:

uint8_t readData()
{
	//TWI Interrupt Flag, TWI Enable Bit, TWI Enable Acknowledge Bit
	TWCR = (1<<TWINT)|(1<<TWEN);
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	80 93 bc 00 	sts	0x00BC, r24
	//Wait for TWINT Flag set.
	while (!(TWCR & (1<<TWINT)));
  d8:	ec eb       	ldi	r30, 0xBC	; 188
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	ec f7       	brge	.-6      	; 0xdc <readData+0xa>
	return TWDR;
  e2:	80 91 bb 00 	lds	r24, 0x00BB
}
  e6:	08 95       	ret

000000e8 <start>:


void start()
{
	TWCR = (1 << TWEN) | (1 << TWINT) | (1<< TWSTA);
  e8:	84 ea       	ldi	r24, 0xA4	; 164
  ea:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 <<TWINT)));
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <start+0xa>
}
  f8:	08 95       	ret

000000fa <stop>:

void stop()
{
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  fa:	84 e9       	ldi	r24, 0x94	; 148
  fc:	80 93 bc 00 	sts	0x00BC, r24
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 100:	ec eb       	ldi	r30, 0xBC	; 188
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	84 fd       	sbrc	r24, 4
 108:	fd cf       	rjmp	.-6      	; 0x104 <stop+0xa>
}
 10a:	08 95       	ret

0000010c <initInterrupt>:
void initInterrupt(){
 /************************************************************************/
 /* Initiate Interrupt                                                  */
 /************************************************************************/

  OCR1A=15624;
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	9d e3       	ldi	r25, 0x3D	; 61
 110:	90 93 89 00 	sts	0x0089, r25
 114:	80 93 88 00 	sts	0x0088, r24
 // DDRC = (1<<PC4)||(1<<PC5);		// Set PC4 and PC5 as input (Using for interrupt)
 // PORTC = (1<<PD4)||(1<<PC5);		// Enable PD4&5 pull-up resistor
  sei();		//Enable Global Interrupt
 118:	78 94       	sei
  
  /************************************************************************/
  /* Initiate TIMER1                                    */
  /************************************************************************/
  TCCR1A = 0b10000000;//Clears our comparison value at match
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	80 93 80 00 	sts	0x0080, r24
  TCCR1B=0b00001011;
 120:	8b e0       	ldi	r24, 0x0B	; 11
 122:	80 93 81 00 	sts	0x0081, r24
  //TCCR1B = 0b00001101; //Use a prescaler of clock/1024 and enable clear timer on compare (ctc)//Start timer without prescaller TCCR1B|=(1<<CS10);
  TCNT1H = 0; //TCNT1H+L is the start value for our timer
 126:	10 92 85 00 	sts	0x0085, r1
  TCNT1L = 0; //
 12a:	10 92 84 00 	sts	0x0084, r1
  TIMSK1 = 0b00000010; //Enable interrupt for compare match mot "A"
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 6f 00 	sts	0x006F, r24
 134:	08 95       	ret

00000136 <initUSART>:
void initUSART(){
  /************************************************************************/
  /* Initiate USART                                                       */
  /************************************************************************/
  /*Set baud rate */
  UBRR0H = (unsigned char)(MYUBRR>>8);
 136:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (unsigned char) MYUBRR;
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	80 93 c4 00 	sts	0x00C4, r24
  /* Enable receiver and transmitter   */
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 140:	88 e1       	ldi	r24, 0x18	; 24
 142:	80 93 c1 00 	sts	0x00C1, r24
  /* Frame format: 8 data, No parity, 1stop bit */
  UCSR0C = (3<<UCSZ00);
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 c2 00 	sts	0x00C2, r24
 14c:	08 95       	ret

0000014e <TWI_init>:

  
}
void TWI_init(){
	//Initialize I2C
		PRR &= ~(1 << PRTWI);	//Turn off power reduction so i2c is not disabled
 14e:	e4 e6       	ldi	r30, 0x64	; 100
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8f 77       	andi	r24, 0x7F	; 127
 156:	80 83       	st	Z, r24
		//TWCR &= ~(1 << TWIE);	//Turn off the Interrupt Enable
		//TWCR |=(1<<TWIE);
		TWBR = 12;	//Set the bit rate register at 12 for 16 MHz CPU Clock and SCL I2C Clock at 400KHz
 158:	8c e0       	ldi	r24, 0x0C	; 12
 15a:	80 93 b8 00 	sts	0x00B8, r24
		//TWSR &= ~(1 << TWPS1) | (1 << TWPS0); //No Prescaler to mess up the status register
		TWSR=0;
 15e:	10 92 b9 00 	sts	0x00B9, r1
 162:	08 95       	ret

00000164 <TWIwrite>:
	
}

 

void TWIwrite(uint8_t slaveAddr, uint8_t reg, uint8_t data){
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	18 2f       	mov	r17, r24
 16c:	d6 2f       	mov	r29, r22
 16e:	c4 2f       	mov	r28, r20
	//Start
	start();
 170:	0e 94 74 00 	call	0xe8	; 0xe8 <start>
	//CheckStatusRegister(0x08);
//	serialWrite(0x41);//A	
	writeData(slaveAddr<<1);
 174:	81 2f       	mov	r24, r17
 176:	88 0f       	add	r24, r24
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <writeData>
	//CheckStatusRegister(0x18);// check the status register for the slave SLA+W transmitted ACK received)
//	serialWrite(0x42);//B
	//Write data (Reg.Addr)	
	writeData(reg);
 17c:	8d 2f       	mov	r24, r29
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <writeData>
	//CheckStatusRegister(0x28);// check the status register for the slave register transmitted ACK received)
//	serialWrite(0x43);//C	
	writeData(data);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <writeData>
	//CheckStatusRegister(0x28);// check the status register for the slave data transmitted ACK received)
//	serialWrite(0x44);//D
	//Stop
	stop();
 188:	0e 94 7d 00 	call	0xfa	; 0xfa <stop>
	
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	08 95       	ret

00000194 <TWIreadMultiple>:
	//Stop
	stop();
	return data;
}

void TWIreadMultiple(uint8_t slaveAddr, uint16_t reg,uint8_t *array, uint8_t size){
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	c8 2f       	mov	r28, r24
 1aa:	d6 2f       	mov	r29, r22
 1ac:	6a 01       	movw	r12, r20
 1ae:	e2 2e       	mov	r14, r18
	//Start
	start();
 1b0:	0e 94 74 00 	call	0xe8	; 0xe8 <start>
	//CheckStatusRegister(0x08);
	//serialWrite(0x47);//G
	//Send SLA + W 0x1E accelerometer
	writeData((slaveAddr<<1));
 1b4:	8c 2f       	mov	r24, r28
 1b6:	88 0f       	add	r24, r24
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <writeData>
	//CheckStatusRegister(0x18);// check the status register for the slave SLA+W transmitted ACK received)
	//serialWrite(0x48);//H
	writeData(reg);
 1bc:	8d 2f       	mov	r24, r29
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <writeData>
	//CheckStatusRegister(0x50);// check the status register for the slave SLA+W transmitted ACK received)
	//serialWrite(0x49);//I
	//Repeat start
	start();
 1c2:	0e 94 74 00 	call	0xe8	; 0xe8 <start>
	//CheckStatusRegister(0x10);
	//serialWrite(0x4A);//J
	//send slave address and r
	writeData((slaveAddr<<1)|1);
 1c6:	8c 2f       	mov	r24, r28
 1c8:	88 0f       	add	r24, r24
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <writeData>
	//CheckStatusRegister(0x40);// check the status register for the slave SLA+R transmitted ACK received)
	//serialWrite(0x4B);//K
		int i=0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
		while(i<size) {
 1d4:	f1 2c       	mov	r15, r1
			if ((i+1)!=size)
			array[i]=readACK();
			else array[i]=readData(); // read without ACK on last byte
			i++;
 1d6:	ae 2c       	mov	r10, r14
 1d8:	bf 2c       	mov	r11, r15
	//send slave address and r
	writeData((slaveAddr<<1)|1);
	//CheckStatusRegister(0x40);// check the status register for the slave SLA+R transmitted ACK received)
	//serialWrite(0x4B);//K
		int i=0;
		while(i<size) {
 1da:	16 c0       	rjmp	.+44     	; 0x208 <TWIreadMultiple+0x74>
			if ((i+1)!=size)
 1dc:	8c 01       	movw	r16, r24
 1de:	0f 5f       	subi	r16, 0xFF	; 255
 1e0:	1f 4f       	sbci	r17, 0xFF	; 255
 1e2:	e0 16       	cp	r14, r16
 1e4:	f1 06       	cpc	r15, r17
 1e6:	41 f0       	breq	.+16     	; 0x1f8 <TWIreadMultiple+0x64>
			array[i]=readACK();
 1e8:	e6 01       	movw	r28, r12
 1ea:	c8 0f       	add	r28, r24
 1ec:	d9 1f       	adc	r29, r25
 1ee:	0e 94 5e 00 	call	0xbc	; 0xbc <readACK>
 1f2:	88 83       	st	Y, r24
			else array[i]=readData(); // read without ACK on last byte
			i++;
 1f4:	c8 01       	movw	r24, r16
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <TWIreadMultiple+0x74>
	//serialWrite(0x4B);//K
		int i=0;
		while(i<size) {
			if ((i+1)!=size)
			array[i]=readACK();
			else array[i]=readData(); // read without ACK on last byte
 1f8:	e6 01       	movw	r28, r12
 1fa:	c8 0f       	add	r28, r24
 1fc:	d9 1f       	adc	r29, r25
 1fe:	0e 94 69 00 	call	0xd2	; 0xd2 <readData>
 202:	88 83       	st	Y, r24
			i++;
 204:	8a 2d       	mov	r24, r10
 206:	9b 2d       	mov	r25, r11
	//send slave address and r
	writeData((slaveAddr<<1)|1);
	//CheckStatusRegister(0x40);// check the status register for the slave SLA+R transmitted ACK received)
	//serialWrite(0x4B);//K
		int i=0;
		while(i<size) {
 208:	8e 15       	cp	r24, r14
 20a:	9f 05       	cpc	r25, r15
 20c:	3c f3       	brlt	.-50     	; 0x1dc <TWIreadMultiple+0x48>
			i++;
		}
	//CheckStatusRegister(0x58);// check the status register for the data  received and Master NACK sent)
	//serialWrite(0x4C);//L
	//Stop
	stop();
 20e:	0e 94 7d 00 	call	0xfa	; 0xfa <stop>
	
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	af 90       	pop	r10
 226:	08 95       	ret

00000228 <uart_putc>:
/******************************************************************//**
 * Sends a single character via UART (eg. to a Hyperterminal).
 *********************************************************************/
void uart_putc(unsigned char c)
{
    while (!(UCSR0A & (1<<UDRE0)))  // wait until sending is possible
 228:	e0 ec       	ldi	r30, 0xC0	; 192
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	95 ff       	sbrs	r25, 5
 230:	fd cf       	rjmp	.-6      	; 0x22c <uart_putc+0x4>
    {
    }                             
    UDR0 = c;                       // sending signs
 232:	80 93 c6 00 	sts	0x00C6, r24
 236:	08 95       	ret

00000238 <uart_puts>:
 
/******************************************************************//**
 * Sends a complete string via UART (eg. to a Hyperterminal).
 *********************************************************************/
void uart_puts (char *s)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
    while (*s)
 23e:	88 81       	ld	r24, Y
 240:	88 23       	and	r24, r24
 242:	31 f0       	breq	.+12     	; 0x250 <uart_puts+0x18>
 244:	21 96       	adiw	r28, 0x01	; 1
    {                               // sending char until "/0"
        uart_putc(*s);
 246:	0e 94 14 01 	call	0x228	; 0x228 <uart_putc>
/******************************************************************//**
 * Sends a complete string via UART (eg. to a Hyperterminal).
 *********************************************************************/
void uart_puts (char *s)
{
    while (*s)
 24a:	89 91       	ld	r24, Y+
 24c:	81 11       	cpse	r24, r1
 24e:	fb cf       	rjmp	.-10     	; 0x246 <uart_puts+0xe>
    {                               // sending char until "/0"
        uart_putc(*s);
        s++;
    }
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <__vector_11>:
/************************************************************************/



char s[7];
ISR(TIMER1_COMPA_vect){
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	64 97       	sbiw	r28, 0x14	; 20
 28e:	de bf       	out	0x3e, r29	; 62
 290:	cd bf       	out	0x3d, r28	; 61
/************************************************************************/
/* Get the value from  accelerometer/magnetrometer send through usart.			        */
/************************************************************************/
   uart_puts("Acc: ");
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uint8_t jenny[5];
	uint16_t accelerometer[2];
	TWIreadMultiple(Accelerometer_addr,0xA8,jenny,5);//MSB=1 read from OUT_X_L 0x28;  0b0010 1000
 29a:	25 e0       	ldi	r18, 0x05	; 5
 29c:	ae 01       	movw	r20, r28
 29e:	4f 5f       	subi	r20, 0xFF	; 255
 2a0:	5f 4f       	sbci	r21, 0xFF	; 255
 2a2:	68 ea       	ldi	r22, 0xA8	; 168
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	8e e1       	ldi	r24, 0x1E	; 30
 2a8:	0e 94 ca 00 	call	0x194	; 0x194 <TWIreadMultiple>

 	accelerometer[0] = (int16_t)(jenny[0]|jenny[1] << 8 );
 2ac:	ca 80       	ldd	r12, Y+2	; 0x02
 2ae:	d1 2c       	mov	r13, r1
 2b0:	dc 2c       	mov	r13, r12
 2b2:	cc 24       	eor	r12, r12
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	c8 2a       	or	r12, r24
	accelerometer[1] = (int16_t)(jenny[2]|jenny[3] << 8 );
 2b8:	ec 80       	ldd	r14, Y+4	; 0x04
 2ba:	f1 2c       	mov	r15, r1
 2bc:	fe 2c       	mov	r15, r14
 2be:	ee 24       	eor	r14, r14
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	e8 2a       	or	r14, r24
	accelerometer[2] = (int16_t)(jenny[4]|jenny[5] << 8 );
 2c4:	0e 81       	ldd	r16, Y+6	; 0x06
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	10 2f       	mov	r17, r16
 2ca:	00 27       	eor	r16, r16
 2cc:	8d 81       	ldd	r24, Y+5	; 0x05
 2ce:	08 2b       	or	r16, r24

	uart_puts("X:");
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( " " );
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2e0:	4a e0       	ldi	r20, 0x0A	; 10
 2e2:	6a e2       	ldi	r22, 0x2A	; 42
 2e4:	71 e0       	ldi	r23, 0x01	; 1
 2e6:	c6 01       	movw	r24, r12
 2e8:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	itoa(accelerometer[0], s, 10 );
	uart_puts( s );
 2ec:	8a e2       	ldi	r24, 0x2A	; 42
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\t\t" );
 2f4:	89 e0       	ldi	r24, 0x09	; 9
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	
	uart_puts("Y:");
 2fc:	8c e0       	ldi	r24, 0x0C	; 12
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( " " );
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 30c:	4a e0       	ldi	r20, 0x0A	; 10
 30e:	6a e2       	ldi	r22, 0x2A	; 42
 310:	71 e0       	ldi	r23, 0x01	; 1
 312:	c7 01       	movw	r24, r14
 314:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	itoa(accelerometer[1], s, 10 );
	uart_puts( s );
 318:	8a e2       	ldi	r24, 0x2A	; 42
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\t\t" );
 320:	89 e0       	ldi	r24, 0x09	; 9
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	
	uart_puts("Z:");
 328:	8f e0       	ldi	r24, 0x0F	; 15
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( " " );
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 338:	4a e0       	ldi	r20, 0x0A	; 10
 33a:	6a e2       	ldi	r22, 0x2A	; 42
 33c:	71 e0       	ldi	r23, 0x01	; 1
 33e:	c8 01       	movw	r24, r16
 340:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	itoa(accelerometer[2], s, 10 );
	uart_puts( s );
 344:	8a e2       	ldi	r24, 0x2A	; 42
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\t\t" );	
 34c:	89 e0       	ldi	r24, 0x09	; 9
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\n\r" ); //new line
 354:	82 e1       	ldi	r24, 0x12	; 18
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35c:	2a e2       	ldi	r18, 0x2A	; 42
 35e:	30 e5       	ldi	r19, 0x50	; 80
 360:	8e ef       	ldi	r24, 0xFE	; 254
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	21 50       	subi	r18, 0x01	; 1
 366:	30 40       	sbci	r19, 0x00	; 0
 368:	80 40       	sbci	r24, 0x00	; 0
 36a:	90 40       	sbci	r25, 0x00	; 0
 36c:	d9 f7       	brne	.-10     	; 0x364 <__vector_11+0x10e>
 36e:	00 00       	nop
	_delay_ms(100000);
/************************************************************************/
/* Get the value from  accelerometer/magnetrometer send through usart.			        */
/************************************************************************/
	    uart_puts("Mag: ");
 370:	85 e1       	ldi	r24, 0x15	; 21
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
		uint8_t jenni[5];
		uint16_t magnetrometer[2];
		TWIreadMultiple(Magnetrometer_addr,0x08|(1<<7),jenni,5);//MSB=1 read from OUT_X_L 0x28;  0b0010 1000
 378:	25 e0       	ldi	r18, 0x05	; 5
 37a:	ae 01       	movw	r20, r28
 37c:	4a 5f       	subi	r20, 0xFA	; 250
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	68 e8       	ldi	r22, 0x88	; 136
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	8e e1       	ldi	r24, 0x1E	; 30
 386:	0e 94 ca 00 	call	0x194	; 0x194 <TWIreadMultiple>

		magnetrometer[0] = (int16_t)(jenni[0]|jenni[1] << 8 );
 38a:	cf 80       	ldd	r12, Y+7	; 0x07
 38c:	d1 2c       	mov	r13, r1
 38e:	dc 2c       	mov	r13, r12
 390:	cc 24       	eor	r12, r12
 392:	8e 81       	ldd	r24, Y+6	; 0x06
 394:	c8 2a       	or	r12, r24
		magnetrometer[1] = (int16_t)(jenni[2]|jenni[3] << 8 );
 396:	e9 84       	ldd	r14, Y+9	; 0x09
 398:	f1 2c       	mov	r15, r1
 39a:	fe 2c       	mov	r15, r14
 39c:	ee 24       	eor	r14, r14
 39e:	88 85       	ldd	r24, Y+8	; 0x08
 3a0:	e8 2a       	or	r14, r24
		magnetrometer[2] = (int16_t)(jenni[4]|jenni[5] << 8 );
 3a2:	0b 85       	ldd	r16, Y+11	; 0x0b
 3a4:	10 e0       	ldi	r17, 0x00	; 0
 3a6:	10 2f       	mov	r17, r16
 3a8:	00 27       	eor	r16, r16
 3aa:	8a 85       	ldd	r24, Y+10	; 0x0a
 3ac:	08 2b       	or	r16, r24

	
	uart_puts("X:");
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( " " );
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 3be:	4a e0       	ldi	r20, 0x0A	; 10
 3c0:	6a e2       	ldi	r22, 0x2A	; 42
 3c2:	71 e0       	ldi	r23, 0x01	; 1
 3c4:	c6 01       	movw	r24, r12
 3c6:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	itoa(magnetrometer[0], s, 10 );
	uart_puts( s );
 3ca:	8a e2       	ldi	r24, 0x2A	; 42
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\t\t" );
 3d2:	89 e0       	ldi	r24, 0x09	; 9
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	
	uart_puts("Y:");
 3da:	8c e0       	ldi	r24, 0x0C	; 12
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( " " );
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 3ea:	4a e0       	ldi	r20, 0x0A	; 10
 3ec:	6a e2       	ldi	r22, 0x2A	; 42
 3ee:	71 e0       	ldi	r23, 0x01	; 1
 3f0:	c7 01       	movw	r24, r14
 3f2:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	itoa(magnetrometer[1], s, 10 );
	uart_puts( s );
 3f6:	8a e2       	ldi	r24, 0x2A	; 42
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\t\t" );
 3fe:	89 e0       	ldi	r24, 0x09	; 9
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	
	uart_puts("Z:");
 406:	8f e0       	ldi	r24, 0x0F	; 15
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( " " );
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 416:	4a e0       	ldi	r20, 0x0A	; 10
 418:	6a e2       	ldi	r22, 0x2A	; 42
 41a:	71 e0       	ldi	r23, 0x01	; 1
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	itoa(magnetrometer[2], s, 10 );
	uart_puts( s );
 422:	8a e2       	ldi	r24, 0x2A	; 42
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\t\t" );
 42a:	89 e0       	ldi	r24, 0x09	; 9
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\n\r" ); //new line
 432:	82 e1       	ldi	r24, 0x12	; 18
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 43a:	2a e2       	ldi	r18, 0x2A	; 42
 43c:	30 e5       	ldi	r19, 0x50	; 80
 43e:	8e ef       	ldi	r24, 0xFE	; 254
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	21 50       	subi	r18, 0x01	; 1
 444:	30 40       	sbci	r19, 0x00	; 0
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	d9 f7       	brne	.-10     	; 0x442 <__vector_11+0x1ec>
 44c:	00 00       	nop
	_delay_ms(100000);

/************************************************************************/
/* Get the value from  gyrometer send through usart.			        */
/************************************************************************/
	 uart_puts("Gyro: ");
 44e:	8b e1       	ldi	r24, 0x1B	; 27
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uint8_t array[5];
	uint16_t gyrometer[2];
	TWIreadMultiple(Gyrometer_addr,0xA8,array,5);//MSB=1 read from OUT_X_L 0x28;  0b0010 1000
 456:	25 e0       	ldi	r18, 0x05	; 5
 458:	ae 01       	movw	r20, r28
 45a:	45 5f       	subi	r20, 0xF5	; 245
 45c:	5f 4f       	sbci	r21, 0xFF	; 255
 45e:	68 ea       	ldi	r22, 0xA8	; 168
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	8a e6       	ldi	r24, 0x6A	; 106
 464:	0e 94 ca 00 	call	0x194	; 0x194 <TWIreadMultiple>

 	gyrometer[0] = (int16_t)(array[0]|array[1] << 8 );
 468:	cc 84       	ldd	r12, Y+12	; 0x0c
 46a:	d1 2c       	mov	r13, r1
 46c:	dc 2c       	mov	r13, r12
 46e:	cc 24       	eor	r12, r12
 470:	8b 85       	ldd	r24, Y+11	; 0x0b
 472:	c8 2a       	or	r12, r24
	gyrometer[1] = (int16_t)(array[2]|array[3] << 8 );
 474:	ee 84       	ldd	r14, Y+14	; 0x0e
 476:	f1 2c       	mov	r15, r1
 478:	fe 2c       	mov	r15, r14
 47a:	ee 24       	eor	r14, r14
 47c:	8d 85       	ldd	r24, Y+13	; 0x0d
 47e:	e8 2a       	or	r14, r24
	gyrometer[2] = (int16_t)(array[4]|array[5] << 8 );
 480:	08 89       	ldd	r16, Y+16	; 0x10
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	10 2f       	mov	r17, r16
 486:	00 27       	eor	r16, r16
 488:	8f 85       	ldd	r24, Y+15	; 0x0f
 48a:	08 2b       	or	r16, r24
uart_puts("X:");
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts( " " );
 494:	84 e0       	ldi	r24, 0x04	; 4
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 49c:	4a e0       	ldi	r20, 0x0A	; 10
 49e:	6a e2       	ldi	r22, 0x2A	; 42
 4a0:	71 e0       	ldi	r23, 0x01	; 1
 4a2:	c6 01       	movw	r24, r12
 4a4:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
itoa(gyrometer[0], s, 10 );
uart_puts( s );
 4a8:	8a e2       	ldi	r24, 0x2A	; 42
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts( "\t\t" );
 4b0:	89 e0       	ldi	r24, 0x09	; 9
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts("Y:");
 4b8:	8c e0       	ldi	r24, 0x0C	; 12
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts( " " );
 4c0:	84 e0       	ldi	r24, 0x04	; 4
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 4c8:	4a e0       	ldi	r20, 0x0A	; 10
 4ca:	6a e2       	ldi	r22, 0x2A	; 42
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	c7 01       	movw	r24, r14
 4d0:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
itoa(gyrometer[1], s, 10 );
uart_puts( s );
 4d4:	8a e2       	ldi	r24, 0x2A	; 42
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts( "\t\t" );
 4dc:	89 e0       	ldi	r24, 0x09	; 9
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts("Z:");
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts( " " );
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 4f4:	4a e0       	ldi	r20, 0x0A	; 10
 4f6:	6a e2       	ldi	r22, 0x2A	; 42
 4f8:	71 e0       	ldi	r23, 0x01	; 1
 4fa:	c8 01       	movw	r24, r16
 4fc:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
itoa(gyrometer[2], s, 10 );
uart_puts( s );
 500:	8a e2       	ldi	r24, 0x2A	; 42
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts( "\t\t" );	
 508:	89 e0       	ldi	r24, 0x09	; 9
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
uart_puts( "\n\r" ); //new line	
 510:	82 e1       	ldi	r24, 0x12	; 18
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 518:	2a e2       	ldi	r18, 0x2A	; 42
 51a:	30 e5       	ldi	r19, 0x50	; 80
 51c:	8e ef       	ldi	r24, 0xFE	; 254
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	21 50       	subi	r18, 0x01	; 1
 522:	30 40       	sbci	r19, 0x00	; 0
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	d9 f7       	brne	.-10     	; 0x520 <__vector_11+0x2ca>
 52a:	00 00       	nop
	_delay_ms(100000);
/************************************************************************/
/* Get the value from  barometer send through usart.			        */
/************************************************************************/
   uart_puts("Baro: ");
 52c:	82 e2       	ldi	r24, 0x22	; 34
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uint8_t jen[5];
	uint32_t barometer[1];
	TWIreadMultiple(barometer_addr,0x28|(1<<7),jen,2);//MSB=1 read from OUT_X_L
 534:	22 e0       	ldi	r18, 0x02	; 2
 536:	ae 01       	movw	r20, r28
 538:	40 5f       	subi	r20, 0xF0	; 240
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
 53c:	68 ea       	ldi	r22, 0xA8	; 168
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	8c e5       	ldi	r24, 0x5C	; 92
 542:	0e 94 ca 00 	call	0x194	; 0x194 <TWIreadMultiple>

	barometer[0] = (int32_t)(jen[0]|jen[1] << 8|jen[2]<<16 );
 546:	09 89       	ldd	r16, Y+17	; 0x11
 548:	10 e0       	ldi	r17, 0x00	; 0
 54a:	10 2f       	mov	r17, r16
 54c:	00 27       	eor	r16, r16
 54e:	88 89       	ldd	r24, Y+16	; 0x10
 550:	08 2b       	or	r16, r24
	
	 uart_puts(" ");
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 55a:	4a e0       	ldi	r20, 0x0A	; 10
 55c:	6a e2       	ldi	r22, 0x2A	; 42
 55e:	71 e0       	ldi	r23, 0x01	; 1
 560:	c8 01       	movw	r24, r16
 562:	0e 94 1c 03 	call	0x638	; 0x638 <__itoa_ncheck>
	
	itoa(barometer[0], s, 10 );
	uart_puts( s );
 566:	8a e2       	ldi	r24, 0x2A	; 42
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\t\t" );
 56e:	89 e0       	ldi	r24, 0x09	; 9
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
	uart_puts( "\n\r" ); //new line
 576:	82 e1       	ldi	r24, 0x12	; 18
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 1c 01 	call	0x238	; 0x238 <uart_puts>
 57e:	2a ea       	ldi	r18, 0xAA	; 170
 580:	31 e2       	ldi	r19, 0x21	; 33
 582:	8f ee       	ldi	r24, 0xEF	; 239
 584:	99 e0       	ldi	r25, 0x09	; 9
 586:	21 50       	subi	r18, 0x01	; 1
 588:	30 40       	sbci	r19, 0x00	; 0
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	d9 f7       	brne	.-10     	; 0x586 <__vector_11+0x330>
 590:	00 00       	nop
	_delay_ms(1000000);


}
 592:	64 96       	adiw	r28, 0x14	; 20
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	cf 90       	pop	r12
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <main>:
uint8_t main(void)
{
	initUSART();
 5d0:	0e 94 9b 00 	call	0x136	; 0x136 <initUSART>
	TWI_init();	
 5d4:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_init>
	/* Configurate gyrometer		        */
	/************************************************************************/
	//TWIwrite(Accelerometer_addr,0x23,0x08);	//0b0000 1000
	 // DR = 01 (200 Hz ODR); BW = 10 (50 Hz bandwidth); PD = 1 (normal mode); Zen = Yen = Xen = 1 (all axes enabled)
	// writeReg(CTRL_REG1, 0x6F);
	TWIwrite(Gyrometer_addr,0x20, 0x6F); // 0b0100 0111
 5d8:	4f e6       	ldi	r20, 0x6F	; 111
 5da:	60 e2       	ldi	r22, 0x20	; 32
 5dc:	8a e6       	ldi	r24, 0x6A	; 106
 5de:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>
// 	 // writeReg(CTRL_REG4, 0x00);
 	TWIwrite(Gyrometer_addr,0x23, 0x00); // 0b0100 0111
 5e2:	40 e0       	ldi	r20, 0x00	; 0
 5e4:	63 e2       	ldi	r22, 0x23	; 35
 5e6:	8a e6       	ldi	r24, 0x6A	; 106
 5e8:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>
// 	 // writeReg(LOW_ODR, 0x00);
 	TWIwrite(Gyrometer_addr,0x39, 0x00); // 0b0100 0111
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	69 e3       	ldi	r22, 0x39	; 57
 5f0:	8a e6       	ldi	r24, 0x6A	; 106
 5f2:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>
	 /************************************************************************/
	  // Accelerometer
	  // 0x00 = 0b00000000
	  // AFS = 0 (+/- 2 g full scale)
	 // writeReg(CTRL2, 0x00);
       TWIwrite(Accelerometer_addr,0x21,0x00);
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	61 e2       	ldi	r22, 0x21	; 33
 5fa:	8e e1       	ldi	r24, 0x1E	; 30
 5fc:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>
	  // 0x57 = 0b01010111
	  // AODR = 0101 (50 Hz ODR); AZEN = AYEN = AXEN = 1 (all axes enabled)
	 // writeReg(CTRL1, 0x57);
	  TWIwrite(Accelerometer_addr,0x20,0x57);
 600:	47 e5       	ldi	r20, 0x57	; 87
 602:	60 e2       	ldi	r22, 0x20	; 32
 604:	8e e1       	ldi	r24, 0x1E	; 30
 606:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>

	  // Magnetometer
	  // 0x64 = 0b01100100
	  // M_RES = 11 (high resolution mode); M_ODR = 001 (6.25 Hz ODR)
	  //writeReg(CTRL5, 0x64);
	  TWIwrite(Magnetrometer_addr,0x24,0x64);
 60a:	44 e6       	ldi	r20, 0x64	; 100
 60c:	64 e2       	ldi	r22, 0x24	; 36
 60e:	8e e1       	ldi	r24, 0x1E	; 30
 610:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>

	  // 0x20 = 0b00100000
	  // MFS = 01 (+/- 4 gauss full scale)
	 // writeReg(CTRL6, 0x20);
	 TWIwrite(Magnetrometer_addr,0x25,0x20);
 614:	40 e2       	ldi	r20, 0x20	; 32
 616:	65 e2       	ldi	r22, 0x25	; 37
 618:	8e e1       	ldi	r24, 0x1E	; 30
 61a:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>

	  // 0x00 = 0b00000000
	  // MLP = 0 (low power mode off); MD = 00 (continuous-conversion mode)
	  //writeReg(CTRL7, 0x00);
	  TWIwrite(Magnetrometer_addr,0x26,0x00);
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	66 e2       	ldi	r22, 0x26	; 38
 622:	8e e1       	ldi	r24, 0x1E	; 30
 624:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>
	 /************************************************************************/
	 
	 // 0xB0 = 0b10110000
	 // PD = 1 (active mode);  ODR = 011 (12.5 Hz pressure & temperature output data rate)
	 //writeReg(CTRL_REG1, 0xB0);
	 TWIwrite(barometer_addr,0x20,0xB0);
 628:	40 eb       	ldi	r20, 0xB0	; 176
 62a:	60 e2       	ldi	r22, 0x20	; 32
 62c:	8c e5       	ldi	r24, 0x5C	; 92
 62e:	0e 94 b2 00 	call	0x164	; 0x164 <TWIwrite>
	
	initInterrupt();
 632:	0e 94 86 00 	call	0x10c	; 0x10c <initInterrupt>

	while(1){

	}
 636:	ff cf       	rjmp	.-2      	; 0x636 <main+0x66>

00000638 <__itoa_ncheck>:
 638:	bb 27       	eor	r27, r27
 63a:	4a 30       	cpi	r20, 0x0A	; 10
 63c:	31 f4       	brne	.+12     	; 0x64a <__itoa_ncheck+0x12>
 63e:	99 23       	and	r25, r25
 640:	22 f4       	brpl	.+8      	; 0x64a <__itoa_ncheck+0x12>
 642:	bd e2       	ldi	r27, 0x2D	; 45
 644:	90 95       	com	r25
 646:	81 95       	neg	r24
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	0c 94 28 03 	jmp	0x650	; 0x650 <__utoa_common>

0000064e <__utoa_ncheck>:
 64e:	bb 27       	eor	r27, r27

00000650 <__utoa_common>:
 650:	fb 01       	movw	r30, r22
 652:	55 27       	eor	r21, r21
 654:	aa 27       	eor	r26, r26
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	aa 1f       	adc	r26, r26
 65c:	a4 17       	cp	r26, r20
 65e:	10 f0       	brcs	.+4      	; 0x664 <__utoa_common+0x14>
 660:	a4 1b       	sub	r26, r20
 662:	83 95       	inc	r24
 664:	50 51       	subi	r21, 0x10	; 16
 666:	b9 f7       	brne	.-18     	; 0x656 <__utoa_common+0x6>
 668:	a0 5d       	subi	r26, 0xD0	; 208
 66a:	aa 33       	cpi	r26, 0x3A	; 58
 66c:	08 f0       	brcs	.+2      	; 0x670 <__utoa_common+0x20>
 66e:	a9 5d       	subi	r26, 0xD9	; 217
 670:	a1 93       	st	Z+, r26
 672:	00 97       	sbiw	r24, 0x00	; 0
 674:	79 f7       	brne	.-34     	; 0x654 <__utoa_common+0x4>
 676:	b1 11       	cpse	r27, r1
 678:	b1 93       	st	Z+, r27
 67a:	11 92       	st	Z+, r1
 67c:	cb 01       	movw	r24, r22
 67e:	0c 94 41 03 	jmp	0x682	; 0x682 <strrev>

00000682 <strrev>:
 682:	dc 01       	movw	r26, r24
 684:	fc 01       	movw	r30, r24
 686:	67 2f       	mov	r22, r23
 688:	71 91       	ld	r23, Z+
 68a:	77 23       	and	r23, r23
 68c:	e1 f7       	brne	.-8      	; 0x686 <strrev+0x4>
 68e:	32 97       	sbiw	r30, 0x02	; 2
 690:	04 c0       	rjmp	.+8      	; 0x69a <strrev+0x18>
 692:	7c 91       	ld	r23, X
 694:	6d 93       	st	X+, r22
 696:	70 83       	st	Z, r23
 698:	62 91       	ld	r22, -Z
 69a:	ae 17       	cp	r26, r30
 69c:	bf 07       	cpc	r27, r31
 69e:	c8 f3       	brcs	.-14     	; 0x692 <strrev+0x10>
 6a0:	08 95       	ret

000006a2 <_exit>:
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
